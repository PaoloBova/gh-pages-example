# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_analysis_dsair.ipynb.

# %% auto 0
__all__ = ['models', 'results', 'flat_results', 'df', 'fig1_data']

# %% ../nbs/10_analysis_dsair.ipynb 2
from .conditions import *
from .methods import *
from .payoffs import *
from .types import *
from .utils import *

import typing

import fastcore.test
import matplotlib as mpl
import matplotlib.pyplot as plt
from nbdev.showdoc import *
import nptyping
import numpy as np
import pandas
import seaborn as sns 

# %% ../nbs/10_analysis_dsair.ipynb 6
def fig1_data(b:float=4,
              c:float=1,
              B:float=10**4,
              W:float=100,
              β:float=0.01,
              Z:int=100,
              S:list[str]=["AS", "AU"],
              collective:float=1) -> dict: # A dictionary containing the items in `ModelTypeDSAIR`
    """Initialise baseline DSAIR models which vary `s` and `p`. By default,
    we create models for replicating Figure 1 of The Anh et al. 2021."""
    namesofvalues=['s','b','c','p','B','W','β','collective']
    matchingvalues = np.array([[s,b,c,p,B,W,β,collective]
                               for s in np.arange(1,5.1,0.1)
                               for p in np.arange(0,1.02,0.02)])
    models = {k:v for k, v in zip(namesofvalues, matchingvalues.T)}
    models = {**models,
              'Z':Z, # Z should be a scalar
              'strategy_set':S # S should be a list of strings
             }
    return models

# %% ../nbs/10_analysis_dsair.ipynb 8
models = fig1_data()

# %% ../nbs/10_analysis_dsair.ipynb 11
results = thread_macro(models,
                       payoffs_sr,
                       payoffs_lr,
                       threshold_society_prefers_safety_dsair,
                       threshold_risk_dominant_safety_dsair,
                       markov_chain,
                      )

# %% ../nbs/10_analysis_dsair.ipynb 15
flat_results = {k:results[k] for k in ['s','b','c','p','B','W','β',
                                       'threshold_society_prefers_safety',
                                       'threshold_risk_dominant_safety']}
flat_results['pr'] = np.round(1 - flat_results['p'], 2)
flat_results['s'] = np.round(flat_results['s'], 2)
for i, strategy in enumerate(["AS", "AU"]):
    flat_results[strategy + "_frequency"] = results['ergodic'][:,i]
    
df = pandas.DataFrame(flat_results)
