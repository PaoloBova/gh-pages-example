# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/plots_utils.ipynb.

# %% auto 0
__all__ = ['plot_strategy_distribution', 'plot_heatmap']

# %% ../nbs/plots_utils.ipynb 2
from .model_utils import *
from .utils import *

import fastcore.test
import matplotlib as mpl
import matplotlib.pyplot as plt
from nbdev.showdoc import *
import nptyping
import numpy as np
import pandas
import plotly.graph_objects as go

# %% ../nbs/plots_utils.ipynb 3
def plot_strategy_distribution(data, # The dataset containing data on parameters and the strategy distribution
                               strategy_set, # The strategies to plot from the dataset
                               x="pr", # The parameter to place on the x-axis of the plot
                               x_label='Risk of an AI disaster, pr', # the x-axis label
                               title='Strategy distribution', # the plot title
                               thresholds=["threshold_society_prefers_safety",
                                           "threshold_risk_dominant_safety"], # A list of threshold names in data
                               ) -> None:
    """Plot the strategy distribution as we vary `x`."""

    fig, ax = plt.subplots()
    ax.stackplot(data[x],
                 [data[strategy + "_frequency"] for strategy in strategy_set],
                 labels=strategy_set,
                 alpha=0.8)
    ax.legend(loc='upper left')
    ax.set_title(title)
    ax.set_xlabel(x_label)
    ax.set_ylabel('Proportion')

    # Add threshold boundaries to convey dilemma region
    if thresholds!=None:        
        plt.vlines([data[name].values[0] for name in thresholds],
                    0,
                    0.995,
                    colors=[f"C{2+i}" for i in range(len(thresholds))],
                    linewidth=3)

# %% ../nbs/plots_utils.ipynb 4
def plot_heatmap(table, # A pivot table, created using `pandas.pivot` function
                 figure_object=None,
                 xlabel="x",
                 ylabel="y",
                 zlabel="z",
                 cmap='inferno',
                 zmin=0,
                 zmax=1,
                 zcenter=None,
                 norm=None,
                 interpolation=None,
                ):
    """Plot heatmap using the index, columns, and values from `table`."""
    if figure_object==None:
        heatmap, ax = plt.subplots()
    else:
        heatmap, ax = figure_object
    im = ax.imshow(table.values,
                   cmap=cmap,
                   norm=norm,
                   extent=[table.columns.min(),
                           table.columns.max(),
                           table.index.min(),
                           table.index.max()],
                   vmin=zmin,
                   vmax=zmax,
                   interpolation=interpolation,
                   origin='lower',
                   aspect='auto')
    ax.set(xlabel=xlabel,
           ylabel=ylabel)

    cbar = heatmap.colorbar(im)
    cbar.ax.set_ylabel(zlabel)
    return heatmap, ax
