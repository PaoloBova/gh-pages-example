# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Analysis/11_analysis_regulator_markets.ipynb.

# %% auto 0
__all__ = ['Z', 'β', 'sector_strategies', 'allowed_sectors', 'models', 'results', 'result_sums', 'df', 'table']

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 2
from .conditions import *
from .data_utils import *
from .methods import *
from .models import *
from .model_utils import *
from .payoffs import *
from .plot_utils import *
from .types import *
from .utils import *

import copy
import typing
import warnings

import chaospy
import fastcore.test
import ipywidgets
from ipywidgets import interact
import matplotlib as mpl
import matplotlib.pyplot as plt
from nbdev.showdoc import *
import nptyping
import numpy as np
import pandas
import scipy
import seaborn as sns

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 126
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_after",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 145
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8, g=1)
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_after",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 147
Z = {"S2": 100, "S1": 100}
β = 0.01
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8)
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_after",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 150
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8, g=1.1)
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_before",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 151
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8, g=1)
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_before",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 157
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8, g=1.1, strategy_set=["HQ-AS", "HQ-AU",
                                                          "LQ-AS", "LQ-AU"])
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_before",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 158
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8, g=1.1)
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1a_reward_before",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 160
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3],}
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"],}
models = build_reg_market(pfo_h=0.8, g=1.5)
models['incentive_mix'] = 1
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1_reward_mixed",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                      create_profiles,
                      apply_profile_filters,
                      build_payoffs,
                      build_transition_matrix,
                      find_ergodic_distribution,
                      )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
            )

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
            )

plot_strategy_distribution(df[df.s==1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                          )

# %% ../nbs/Analysis/11_analysis_regulator_markets.ipynb 162
Z = {"S2": 100, "S1": 100}
β = 1
sector_strategies = {"S2": [4, 5],
                     "S1": [1, 2, 3], }
allowed_sectors = {"P3": ["S2"],
                   "P2": ["S1"],
                   "P1": ["S1"], }
models = build_reg_market(pfo_h=0.8, g=1.5)
models['incentive_mix'] = 1
models['pfo'] = 0.8
models = {**models,
          "dispatch-type": 'multiple-populations',
          "payoffs_key": "regulatory_markets_v1a_reward_before",
          "β": β,
          "Z": Z,
          "allowed_sectors": allowed_sectors,
          "sector_strategies": sector_strategies,
          }

results = thread_macro(models,
                       payoffs_sr_pfo_extension,
                       threshold_risk_dominant_safety_dsair,
                       threshold_society_prefers_safety_dsair,
                       create_profiles,
                       apply_profile_filters,
                       build_payoffs,
                       build_transition_matrix,
                       find_ergodic_distribution,
                       )
result_sums = np.sum(results['ergodic'], axis=-1)
fastcore.test.test_close(result_sums, 1)

df = thread_macro(results,
                  results_to_dataframe_egt,
                  process_dsair_data)
df['AU_frequency'] = (df['HQ-AU_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['LQ_frequency'] = (df['LQ-AS_frequency']
                      + df['LQ-AU_frequency']
                      + df['LQ-VS_frequency'])
df['AU_frequency_uncaught'] = (df['AU_frequency']
                               * ((1- df['LQ_frequency']) * (1 - df['pfo_h'])
                                  + df['LQ_frequency'] * (1 - df['pfo_l'])))

table = df.pivot_table(index='pr', columns='s', values='AU_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency',
             cmap='inferno',
             )

# Add threshold boundaries to convey dilemma region
plt.plot(table.columns, df[df.pr==1]['threshold_society_prefers_safety'])
plt.plot(table.columns, df[df.pr==1]['threshold_risk_dominant_safety']);

table = df.pivot_table(index='pr', columns='s', values='LQ_frequency')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='LQ Frequency',
             cmap='inferno',
             )

plot_strategy_distribution(df[df.s == 1.5],
                           results['strategy_set'],
                           x="pr",
                           thresholds=None,
                           )

table = df.pivot_table(index='pr', columns='s', values='AU_frequency_uncaught')
plot_heatmap(table,
             xlabel='Speed advantage, s',
             ylabel='Risk of an AI disaster, pr',
             zlabel='AU Frequency uncaught',
             cmap='inferno',
             )

