# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_analytical_conditions.ipynb.

# %% auto 0
__all__ = ['threshold_society_prefers_safety_dsair', 'threshold_risk_dominant_safety_dsair']

# %% ../nbs/03_analytical_conditions.ipynb 2
from nbdev.showdoc import *
from fastcore.test import test_eq
from .utils import *
import typing

import numpy as np
import nptyping

# %% ../nbs/03_analytical_conditions.ipynb 6
def threshold_society_prefers_safety_dsair(models):
    """The threhsold value of AI risk for which society prefers firms to be
    Always Safe in the DSAIR model."""
    s, B, W = [models[k] for k in ['s', 'B', 'W']]
    πAA,πAB,πBA,πBB = [models['payoffs_sr'][:, i:i+1, j:j+1]
                       for i in range(2) for j in range(2)]
    p_risk = 1 - ((πAA + B / (2 * W))
                  / (πBB + s * B / (2 * W)))
    return {**models, "threshold_society_prefers_safety": p_risk}

# %% ../nbs/03_analytical_conditions.ipynb 9
def threshold_risk_dominant_safety_dsair(models):
    """The threshold value of AI risk for which Always Safe is risk dominant
    against Always Unsafe in the DSAIR model."""
    s, B, W = [models[k] for k in ['s', 'B', 'W']]
    πAA,πAB,πBA,πBB = [models['payoffs_sr'][:, i:i+1, j:j+1]
                       for i in range(2) for j in range(2)]
    p_risk = 1 - ((πAA + πAB + B / (2 * W))
                  / (πBA + πBB + 3 * s * B / (2 * W)))
    return {**models, "threshold_risk_dominant_safety": p_risk}
